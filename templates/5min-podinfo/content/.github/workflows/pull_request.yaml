name: Pull Request
on:
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  contents: read
  pull-requests: write
env:
  APP_NAME: ${{ values.name }}
  IMAGE: ${{ values.image }}
{%- if values.cloudProvider === "aws" -%}
{% raw %}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
{% endraw %}
{%- elif values.cloudProvider === "azure" -%}
{% raw %}
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_ACR_NAME: ${{ vars.AZURE_ACR_NAME }}
{% endraw %}
{%- elif values.cloudProvider === "gcp" -%}
{% raw %}
  GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  GCP_SERVICE_ACCOUNT: ${{ vars.GCP_SERVICE_ACCOUNT }}
  GCP_GAR_HOST: ${{ vars.GCP_GAR_HOST }}
  GCP_GAR_NAME: ${{ vars.GCP_GAR_NAME }}
{% endraw %}
{%- else -%}
{% raw %}

  # Unknown cloud provider: ${{ values.cloudProvider }}
  # Nothing to do here
{% endraw %}
{% endif %}
  BASE_ENVIRONMENT: '5min-local'
  ENVIRONMENT_TYPE: '5min-local'
  HUMCTL_VERSION: '*'
  ENVIRONMENT_ID: {% raw %}pr-${{ github.event.number }}{% endraw %}
  ENVIRONMENT_NAME: {% raw %}PR-${{ github.event.number }}{% endraw %}

{% raw %}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: humanitec/setup-cli-action@v1
        with:
          version: ${{ env.HUMCTL_VERSION }}
      - name: Create Humanitec Env
        run: |
          humctl create environment ${{ env.ENVIRONMENT_ID }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --name ${{ env.ENVIRONMENT_NAME }} \
              -t ${{ env.ENVIRONMENT_TYPE }} \
              --from ${{ env.BASE_ENVIRONMENT }} \
              || true          
      - name: Set Tag with SHA
        run: echo "TAG=`echo $GITHUB_SHA | cut -c 1-7`" >> $GITHUB_ENV
{% endraw %}
{%- if values.cloudProvider === "aws" -%}
{% raw %}
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: login to aws ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: create repo if not existing
        id: create-repo
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.IMAGE }}

      - name: "set CONTAINER_REGISTRY env var"
        run: |
          echo "CONTAINER_REGISTRY=$REGISTRY" >> "$GITHUB_ENV"          
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
{% endraw %}
{%- elif values.cloudProvider === "azure" -%}
{% raw %}
      - name: configure azure credentials
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: login to azure acr
        run: |
          az acr login -n ${{ env.AZURE_ACR_NAME }}
          echo "CONTAINER_REGISTRY=${{ env.AZURE_ACR_NAME }}.azurecr.io" >> "$GITHUB_ENV"          
{% endraw %}
{%- elif values.cloudProvider === "gcp" -%}
{% raw %}
      - name: configure gcp credentials
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: login to gcp gar
        run: |
          gcloud auth configure-docker ${{ env.GCP_GAR_HOST }} --quiet
          echo "CONTAINER_REGISTRY=${{ env.GCP_GAR_NAME }}" >> "$GITHUB_ENV"          
{% endraw %}
{%- elif values.cloudProvider === "5min" -%}
{% raw %}
      - name: Define 5min registry
        run: |
          echo "CONTAINER_REGISTRY=localhost:5001" >> "$GITHUB_ENV"
{% endraw %}
{% endif %}
{% raw %}
      - run: docker build . -t $CONTAINER_REGISTRY/$IMAGE:$TAG
      - run: docker push $CONTAINER_REGISTRY/$IMAGE:$TAG

      - name: Deploy Score
        run: |
          humctl score deploy \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              -f score.yaml \
              --extensions humanitec.score.yaml \
              --workload-source-url "https://github.com/${{ github.repository }}/blob/${{ github.head_ref }}/score.yaml" \
              --image $CONTAINER_REGISTRY/$IMAGE:$TAG \
              --message "$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ github.event.pull_request.commits_url }}?per_page=10" | jq -r .[-1].commit.message)" \
              --wait          
{% endraw %}
